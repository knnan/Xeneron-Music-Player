// Place your key bindings in this file to overwrite the defaults
[
	{
		"key": "ctrl+shift+right",
		"command": "workbench.action.terminal.moveToLineEnd"
	},
	{
		"key": "ctrl+shift+left",
		"command": "workbench.action.terminal.moveToLineStart"
	},
	{
		"key": "ctrl+b",
		"command": "code-runner.run"
	},
	{
		"key": "ctrl+alt+n",
		"command": "-code-runner.run"
	},
	{
		"key": "ctrl+shift+b",
		"command": "code-runner.stop"
	},
	{
		"key": "ctrl+alt+m",
		"command": "-code-runner.stop"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.toggleSidebarVisibility"
	},
	{
		"key": "ctrl+k ctrl+b",
		"command": "-workbench.action.toggleSidebarVisibility"
	},
	{
		"key": "ctrl+b",
		"command": "-workbench.action.toggleSidebarVisibility"
	},
	{
		"key": "ctrl+shift+right",
		"command": "cursorEnd",
		"when": "textInputFocus"
	},
	{
		"key": "end",
		"command": "-cursorEnd",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+shift+left",
		"command": "cursorHome",
		"when": "textInputFocus"
	},
	{
		"key": "home",
		"command": "-cursorHome",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+shift+a",
		"command": "workbench.action.toggleActivityBarVisibility"
	},
	{
		"key": "ctrl+alt+right",
		"command": "cursorEndSelect",
		"when": "textInputFocus"
	},
	{
		"key": "shift+end",
		"command": "-cursorEndSelect",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+alt+left",
		"command": "cursorHomeSelect",
		"when": "textInputFocus"
	},
	{
		"key": "shift+home",
		"command": "-cursorHomeSelect",
		"when": "textInputFocus"
	},
	{
		"key": "ctrl+shift+m",
		"command": "editor.action.selectToBracket"
	},
	{
		"key": "alt+q",
		"command": "workbench.action.terminal.toggleTerminal"
	},
	{
		"key": "ctrl+`",
		"command": "-workbench.action.terminal.toggleTerminal"
	},
	{
		"key": "ctrl+alt+d",
		"command": "editor.action.selectHighlights",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+shift+l",
		"command": "-editor.action.selectHighlights",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+alt+p",
		"command": "editor.action.addSelectionToPreviousFindMatch"
	},
	{
		"key": "ctrl+alt+p",
		"command": "editor.action.moveSelectionToPreviousFindMatch"
	},
	{
		"key": "ctrl+shift+alt+y",
		"command": "extension.gist.updateAccessKey"
	},
	{
		"key": "ctrl+i '",
		"command": "extension.selectSingleQuote"
	},
	{
		"key": "ctrl+i shift+'",
		"command": "extension.selectDoubleQuote"
	},
	{
		"key": "ctrl+i ;",
		"command": "extension.selectEitherQuote"
	},
	{
		"key": "ctrl+i shift+9",
		"command": "extension.selectParenthesis"
	},
	{
		"key": "ctrl+i `",
		"command": "extension.selectBackTick"
	},
	{
		"key": "ctrl+i [",
		"command": "extension.selectSquareBrackets"
	},
	{
		"key": "ctrl+i shift+[",
		"command": "extension.selectCurlyBrackets"
	},
	{
		"key": "ctrl+i shift+0",
		"command": "extension.selectParenthesisOuter"
	},
	{
		"key": "ctrl+i ]",
		"command": "extension.selectSquareBracketsOuter"
	},
	{
		"key": "ctrl+i shift+]",
		"command": "extension.selectCurlyBracketsOuter"
	},
	{
		"key": "ctrl+i [IntlBackslash]",
		"command": "extension.selectAngleBrackets"
	},
	{
		"key": "ctrl+i shift+,",
		"command": "extension.selectAngleBrackets"
	},
	{
		"key": "ctrl+i shift+[IntlBackslash]",
		"command": "extension.selectInTag"
	},
	{
		"key": "ctrl+i shift+.",
		"command": "extension.selectInTag"
	},
	{
		"key": "ctrl+shift+m",
		"command": "editor.action.selectToBracket",
		"args": {
			"selectBrackets": false
		}
	},
	{
		"key": "shift+alt+right",
		"command": "-editor.action.smartSelect.expand",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+shift+=",
		"command": "editor.action.fontZoomIn"
	},
	{
		"key": "ctrl+shift+-",
		"command": "editor.action.fontZoomOut"
	},
	{
		"key": "alt+left",
		"command": "workbench.action.focusLeftGroup"
	},
	{
		"key": "ctrl+k ctrl+left",
		"command": "-workbench.action.focusLeftGroup"
	},
	{
		"key": "alt+right",
		"command": "workbench.action.focusRightGroup"
	},
	{
		"key": "ctrl+k ctrl+right",
		"command": "-workbench.action.focusRightGroup"
	},
	{
		"key": "ctrl+shift+9",
		"command": "workbench.action.splitEditorRight"
	},
	{
		"key": "ctrl+shift+9",
		"command": "workbench.action.splitEditorLeft"
	},
	{
		"key": "ctrl+shift+0",
		"command": "workbench.action.splitEditorDown"
	},
	{
		"key": "alt+down",
		"command": "workbench.action.focusBelowGroup"
	},
	{
		"key": "ctrl+k ctrl+down",
		"command": "-workbench.action.focusBelowGroup"
	},
	{
		"key": "alt+up",
		"command": "workbench.action.focusAboveGroup"
	},
	{
		"key": "ctrl+k ctrl+up",
		"command": "-workbench.action.focusAboveGroup"
	},
	{
		"key": "shift+alt+enter",
		"command": "sqltools.executeFromInput"
	},
	{
		"key": "alt+enter",
		"command": "sqltools.executeCurrentQuery"
	},
	{
		"key": "alt+enter",
		"command": "vscode-postgres.runQuery",
		"when": "editorLangId == 'postgres'"
	},
	{
		"key": "f5",
		"command": "-vscode-postgres.runQuery",
		"when": "editorLangId == 'postgres'"
	},
	{
		"key": "ctrl+shift+o",
		"command": "editor.action.revealDefinitionAside",
		"when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
	},
	{
		"key": "ctrl+k f12",
		"command": "-editor.action.revealDefinitionAside",
		"when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
	},
	{
		"key": "ctrl+shift+i",
		"command": "editor.action.peekDefinition",
		"when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
	},
	{
		"key": "ctrl+shift+f10",
		"command": "-editor.action.peekDefinition",
		"when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
	},
	{
		"key": "ctrl+meta+up",
		"command": "workbench.action.moveEditorToAboveGroup"
	},
	{
		"key": "ctrl+meta+down",
		"command": "workbench.action.moveEditorToBelowGroup"
	},
	{
		"key": "ctrl+meta+left",
		"command": "workbench.action.moveEditorToLeftGroup"
	},
	{
		"key": "ctrl+meta+right",
		"command": "workbench.action.moveEditorToRightGroup"
	},
	{
		"key": "ctrl+shift+r",
		"command": "editor.action.formatSelection",
		"when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+k ctrl+f",
		"command": "-editor.action.formatSelection",
		"when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+shift+b",
		"command": "rest-client.request",
		"when": "editorTextFocus && editorLangId == 'http'"
	},
	{
		"key": "ctrl+alt+r",
		"command": "-rest-client.request",
		"when": "editorTextFocus && editorLangId == 'http'"
	},
]
